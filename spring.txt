공유폴더/SPRING

Spring  Framework / SpringBoot  Framework  => Java Framework중 하나

 Frame + work : 이미 작업된(구조가 생성된) 작업을 수행하는일
           => (소프트웨어적 관점) 기능을 미리 클래스/인터페이스 형태로
                구현해놓은 형태(반제품)

 'Spring MVC'

  * Spring  Framework / SpringBoot  Framework 
 
  아직까진 대중화 방법(코드)  / 최신의 기술
     다양한 정보 제공(블로그,구글링) 
  기존 프로젝트 구조이해 
  다양한 버전의 라이브러리 사용 / 특정 버전만 사용가능(최적화)
   초기 세팅(설정)이 어려움(복잡) / 초기 세팅이 매우 쉬움

 *  SPRING 프레임워크 주요 개념
  - EJB보다 가벼운 프레임워크 (경량 프레임워크)
  - IoC (Inversion of Control) : 제어의 역행이라는 기술을 사용해서 객체간의
                                         느슨한 결합을 사용가능
  - DI (Dependency Injection) : 의존성 주입기술 제공(자원관리)
  - AOP (Aspect Oriented Programming) : 관점 지향 프로그래밍
  - 영속성(Persistence)관련 다양한 기능 제공

 * SPRING 제공 기능
 - core : 다른 기능들과 설정을 분리하기위해서 IoC 제공
 - context : 객체(bean)를 다양한 애플리케이션에서 접근 가능하도록 제공
 - DAO : JDBC 기능을 조금더 편리하게 제공
 - ORM : 영속성 관련 프레임워크 연동기능 제공(하이버네이트, 마이바티스) 
 - AOP : 관점 지향 프로그래밍 제공
 - web : 웹 개발에 필요한 정보(기능)제공
 - webMVC :   스프링MVC 개발에 필요한 기능 제공
 
 p122
 
 	JSP MVC
 	
 	요청 <-> Controller - Model(action) - DAO - DB 
 				||
 			   view
 			   
 	Spring MVC
 					   HandlerMapping
 						//
 	요청 <-> DispatcherServlet - HandlerAdater - Controller - Service - DAO -DB
 			  ||		\\
 			  ||		ViewResolver 
			View(JSP)
	
	* 프로젝트의 구성
	
	- Presentation Layer : UI를 담당하는 요소(뷰페이지)
	- Business Layer (Service Layer) : 서비스 계층, 요구사항을 처리하는 계층
	- Data Access Layer (Persistence Layer) : 영속계층, 데이터 처리하는 계층
	
	요청 - Controller -    | Service -       |DAO - DB
			   |
			  View 

		Presentation Layer | Business Layer | Data Access Layer
		
		* Data Access Layer 구성
		DAO -(Mybatis-Spring)- MyBatis(SqlSessionFactory) - DB
		
		* Mybatis(iBatis) : SQL Mapper 라이브러리(프레임워크)
		- try-catch-finally (생략), pstmt 객체 (생략), rs 객체 (생략)
			=> 소스코드의 분량이 줄어들어 효율 증가
			
		- SQL 구문을 구분(파일 분리)
		- spring과의 자동 연동으로 처리
		- 동적 SQL 구문 제공

<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
<!-- https://mvnrepository.com/artifact/org.springframework/spring-test -->

* Mybatis 사용법

1) XML 사용 SQL문 작성, DAO에서 xml코드 호출
	장점 : 별도의 파일에서 sql구문 관리 유지보수 적합
	단점 : 코드 분량이 증가, 작업 복잡도 증가
	
2) 어노테이션사용 SQL문 작성, DAO 인터페이스 형태
	장점 : 코드분량 감소, 생산성 증가
	단점 : SQL수정 할때 매번 컴파일 수행
	
3) XML + 어노테이션 같이 사용
	장점 : 간단한 SQL 어노테이션, 복잡한건 XML파일 구분
	단점 : 개발자의 실력과 경험에 따른 차이가 발생
	
* 도메인(domain) : 개발에 필요한 중요한 개념을 나타내는 명사
	=> 물리적으로 분리가능한 객체의 단위 
	=> 디비 테이블 생성하는 단위	
	
* Mybatis 개발 순서
	- DB생성 & 테이블 생성 (+계정 권한) 
	- 도메인 객체의 설계, 클래스 생성 ( => DTO객체) + lombok 라이브러리
	- DAO 인터페이스 생성
	- 실행에 필요한 동작(추상메서드)을 정의
	- XML 파일을 사용해서 mapper 생성 (SQL를 저장)
	- mapper 파일에 DTD를 추가
	- mapper 파일의 위치(저장경로) 설정
	- SQL 구문 작성
	- mybatis에서 해당 mapper 파일을 인식하도록 설정
	- DAO 구현
	- 스프링에서 실행(테스트)
	
* Project lobmok 설치
	
	https://projectlombok.org/download
	
	CMD 창에서 파일이 있는 위치 이동 후 "java -jar lombok.jar"
	
	STS 파일 위치 추가 install
	
	(기존) 바로가기 파일제거 -> 다시 생성
	
	프로젝트에 lombok 라이브러리 추가


* logger 객체의 로그 레벨
	
	TRACE > DEBUG > INFO > WARN > ERROR > FATAL
	 (1)     (2)     (3)    (4)     (5)    (6)	 
	 
	 FATAL : 시스템 차원의 문제가 발생
	 ERROR : 실행중 문제가 발생한 상태정보 출력
	 WARN : 시스템 오류의 원인정보 출력
	 INFO : 서비스 운영 로그 정보 출력
	 DEBUG : 개발시 디버깅 용도 레벨
	 TRACE : DEBUG 보다 상세정보를 출력

	=> log4j.xml에 설정한 레벨값 => 설정한 레벨값보다 높은 레벨의 메세지만 출력

	* 의존 객체 자동 주입 (Automatic Dependency Injection)
	=> 스프링의 설정파일 / 태그 형태로 의존객체 대상을 명시 하지 않고
	   스프링(컨테이너)이 자동으로 의존 대상을 찾아서 주입하는 것 
	
	@Inject
	 - Java에서 지원하는 어노테이션(특정 프레임워크에 비종속적)
	 - 찾는 순서 : 타입 -> @Qualifier -> 이름 -> 실패
	 - 빌드도구(Maven/pom.xml)에 라이브러리 의존성 추가가 필요	
	 - 멤버변수, setter(), 생성자, 일반메서드 사용가능
	 
	 @Autowired
	 - Spring에서 지원하는 어노테이션(스프링 프레임워크에 종속적)
	 - 찾는 순서 : 타입 -> 이름 -> @Qualifier -> 실패
	 - 별도의 의존성추가 필요 X
	 - 멤버변수, setter(), 생성자, 일반메서드 사용가능
	 
	 @Resource
	 - Java에서 지원하는 어노테이션 (특정 프레임워크에 비종속적)
	 - 찾는 순서 : 이름 -> 타입 -> @Qualifier -> 실패
	 - 멤버변수, setter() => 사용가능
	 
	 ** @Qualifier : 스프링 객체를 구분하기 어려울 때 사용되는 이름(별명)
	 	
	 	<bean id="dataSource" 
		  class="com.zaxxer.hikari.HikariDataSource"
		  destroy-method="close">
		  
		  <qualifier value="이름(h1)">
		  
		  <constructor-arg ref="hikariConfig1"/>
		</bean>
		
		<bean id="dataSource" 
		  class="com.zaxxer.hikari.HikariDataSource"
		  destroy-method="close">
		  
		  <qualifier value="이름(h2)">
		  
		  <constructor-arg ref="hikariConfig2"/>
		</bean>
		
	* 객체 주입 *
	
	@Autowired @Qualifier("h1")
	private DataSource ds;

	* 생성자 주입(Constructor Injection) : 단일 생성자인 경우 @Autowired를 생략가능
	class Test{
	private DataSource ds;
	/* @Autowired */
	public public Test(DataSource ds){ 
		this.ds = ds;
		}	
	}

	* 필드 주입(Field Injection)
	class Test{
		@Autowired
		private DataSource ds;
	}
	
	* 수정자 주입 (Setter Injection)
	class Test{
		private DataSource ds;
		@Autowired
		public void setDataSource(DataSource ds){
			this.ds = ds;
		}
	}















 